'''
Script to add gene ontology and InterPro annotations to protein-protein interactions.

Input:

     - expects a merged and cleaned PPI dataframe generated by the
       filter_and_remap.py script. In other words: a pandas generated
       .tsf file that conforms to the PSI-MITAB format and uses the
       following column headers:
       col_names = [
        'xref_A', 'xref_B', 'alt_identifiers_A', 'alt_identifiers_B',
        'aliases_A', 'aliases_B', 'detection_method', 'author', 'publication',
        'taxid_A', 'taxid_B', 'interaction_type', 'source_database_ids',
        'interaction_identifiers', 'confidence_score'
       ]


The output is saved to a directory of choice (preferably the one mentioned
for the input files, which is named after the pathogen taxonid). The file names
will not overlap with the default ones used by the previous script.
'''

import argparse
import numpy as np
import pandas as pd

from pathlib import Path

from goscripts import obo_tools
from goscripts import gaf_parser

from phppipy.ppi_tools import label_go
from phppipy.ppi_tools import label_interpro

parser = argparse.ArgumentParser(
    description='Script to add annotations to PPI datasets.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument(
    '-i',
    '--input',
    dest='input',
    type=str,
    required=True,
    help='Path to cleaned PPI dataset.')
parser.add_argument(
    '-b',
    '--obo',
    dest='obo',
    type=str,
    required=False,
    help='Path to .obo file.')
parser.add_argument(
    '-g',
    '--gaf',
    dest='gaf',
    type=str,
    required=False,
    help='Path to .gaf file.')
parser.add_argument(
    '-p',
    '--interpro',
    dest='interpro',
    type=str,
    required=False,
    help='Directory with InterPro-Uniprot associations.')
parser.add_argument(
    '-o',
    '--output',
    dest='output',
    type=str,
    required=True,
    help='Path to output file.')
args = parser.parse_args()

# import ppi file
ppi_file = Path(args.input)
ppi_df = pd.read_csv(ppi_file, sep='\t', header=0)
print('PPIs were imported from {}\n'.format(ppi_file))

# Create Gene Ontology dictionaries
print('Creating Gene Ontology dictionaries...')
obo_path = Path(args.obo)
go_dict = obo_tools.importOBO(obo_path, ignore_part_of=False)

# TODO: allow selection of GO namespaces
obo_tools.buildGOtree(
    go_dict, root_nodes=['GO:0008150', 'GO:0005575', 'GO:0003674'])

# Create Gene Association dictionaries
gaf_path = Path(args.gaf)
protein_set = set(
    ppi_df.xref_A.append(ppi_df.xref_B, ignore_index=True).str.extract(
        '^.*:(\w*)-?', expand=False).unique())
gaf_dict = gaf_parser.importGAF(gaf_path, protein_set)

# Number of proteins without GO annotation # TODO plot
not_annotated = [i for i in protein_set if i not in gaf_dict]
print('Number of proteins without GO annotation: {}'.format(
    len(not_annotated)))

# Add GO annotations
label_go.annotate_GO(ppi_df, gaf_dict)

# Create interpro dict
interpro_path = Path(args.interpro)
interpro_dict = label_interpro.create_uniprot2interpro_dict(
    interpro_path, protein_set)
label_interpro.annotate_interpro(ppi_df, interpro_dict)

# save new dataset
out_path = Path(args.output)
out_path.parent.mkdir(parents=True, exist_ok=True)
ppi_df.to_csv(out_path, sep='\t', index=False, header=True)
print('\nSaved annotated PPI dataset to {}'.format(out_path))
